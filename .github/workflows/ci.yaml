name: CI

on:
  # Run on PRs and pushes to the default branch.
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
  - cron: "0 0 * * 0"

env:
  PUB_ENVIRONMENT: bot.github

jobs:
  # Check code formatting and static analysis on a single OS (linux)
  # against Dart dev.
  analyze:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk: [dev]
    steps:
    - uses: actions/checkout@v2
    - uses: dart-lang/setup-dart@v0.3
      with:
        sdk: ${{ matrix.sdk }}
    - id: install
      name: Install dependencies
      run: dart pub get
    - name: Check formatting
      run: dart format --output=none --set-exit-if-changed .
      if: always() && steps.install.outcome == 'success'
    - name: Analyze code
      run: dart analyze # More cleanup-needed --fatal-infos
      if: always() && steps.install.outcome == 'success'

  # Run tests on a matrix consisting of two dimensions:
  # 1. OS: ubuntu-latest, (macos-latest, windows-latest)
  # 2. release channel: dev
  test:
    #needs: analyze
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Add macos-latest and/or windows-latest if relevant for this package.
        os: [ubuntu-latest]
        sdk: [dev]
    steps:
    - uses: actions/checkout@v2
    - uses: dart-lang/setup-dart@v0.3
      with:
        sdk: ${{ matrix.sdk }}
    - uses: nanasess/setup-chromedriver@v1.0.1
    - id: install
      name: Install dependencies
      run: dart pub get
    - name: test
      run: |
        export DISPLAY=:99
        chromedriver --port=4444 --url-base=/wd/hub &
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
        pub run test -j 1
      if: always() && steps.install.outcome == 'success'
      env:
        # until sync_http is migrated to null safety
        DART_VM_OPTIONS: "--no-sound-null-safety"
        CHROMEDRIVER_ARGS: '--no-sandbox --headless'
